{"name":"Node-test-fixtures2","tagline":"Node test fixtures module","body":"# test-fixtures\r\n\r\nA simple but flexible fixtures module for your tests.\r\n\r\nInspired by the [fixtures](https://www.npmjs.org/package/node-fixtures) and [config](https://www.npmjs.org/package/config) modules,\r\nit features the following:\r\n\r\n* <b>Environment aware</b>. Running the code in NODE_ENV=env will extend the fixtures with the ones in env subdirectory.\r\n* <b>Always read fresh fixtures</b>. Every time you use fixtures.namedFixture, it reads them again. Simplifies tear-down.\r\n* <b>Simple inheritance/extension of environments</b>.  Allows you to specify simple dependencies.\r\n* <b>Both JSON and JavaScript formats</b>. Allows you to define fixtures as modules. Use as your own risk, and beware that if your modules are singletons, they will be cached by node (no more \"always read fresh fixtures\").\r\n\r\n## Basic usage\r\nTo load the fixture named validUser, from test/fixtures/validUser.json:\r\n\r\n    var Fixtures = require(\"test-fixtures\");\r\n    var fixtures = new Fixtures(__dirname + \"/test/fixtures\");\r\n\r\n    console.log(fixtures.validUser);\r\n\r\nPlease look at the files in the [examples](examples) directory.\r\n\r\nWhen used with the defaults:\r\n\r\n    node examples/basic.js\r\n    { email: 'john.doe@example.com', password: 'secret' }\r\n    undefined\r\n\r\nWhen used with qa environment:\r\n\r\n    NODE_ENV=qa node examples/basic.js \r\n    { email: 'john.doe@example.com', password: 'QA-secret' }\r\n    { email: 'jane.doe@example.com', password: 'supersecret' }\r\n\r\nWhen using the not-so-basic example in prod environment:\r\n\r\n    NODE_ENV=prod node examples/not_so_basic.js \r\n    { email: 'john.prod@example.com', password: 'QA-secret' }\r\n    { email: 'jane.doe@example.com', password: 'supersecret' }\r\n\r\n## Options\r\nYou can pass the following options as a second argument in the constructor:\r\n\r\n* <b>envVar</b>: Defaults to NODE_ENV.  Extend fixtures in base directory with fixtures in process.env[envVar] subdirectory.\r\n* <b>dependencies</b>: Defaults to {}.  Allows you to define custom environment dependencies.  Useful if you have similar environments where one extends the other (for example staging is based on production), then you can use:\r\n\r\n    var fixtures = new Fixtures(basedir, {dependencies: staging: \"production\"});\r\n\r\nAnd only override the required production fixtures in your staging subdirectory.\r\n\r\n## License\r\n\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) <year> <copyright holders>\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in\r\nall copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\nTHE SOFTWARE.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}